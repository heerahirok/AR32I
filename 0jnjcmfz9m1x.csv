,,,,,,,,,,,,,,,,
"RV32I Instruction sets",,,,,,,,,,,,,,,,
"Integer Arithmatic",,,,,,,,,,,,,,,,
Bit,,31,25,24,20,19,15,14,12,11,7,6,0,,,
"I-type Instruction",,imm[11:0],,,," rs1 ",,"funct3 ",,"rd ",,opcode,,,,
,ADDI,imm[11:0],,,," rs1 ",,"_000 ",,"rd ",,_001_0011,,"Rd  <= Rs1 + { {20{imm[11]}}, imm[11:0]}",,
,SLTI,imm[11:0],,,," rs1 ",,_010,,"rd ",,_001_0011,,"Rd = ( $signed(Rs1) < { {20{imm[11]}}, imm[11:0] } )",,
,SLTIU,imm[11:0],,,," rs1 ",,_011,,"rd ",,_001_0011,,"Rd = ( Rs1 < { {20{imm[11]}}, imm[11:0] } )",,
,XORI,imm[11:0],,,," rs1 ",,_100,,"rd ",,_001_0011,,"Rd  <= Rs1 ^ { {20{imm[11]}}, imm[11:0]}",,
,ORI,imm[11:0],,,," rs1 ",,_110,,"rd ",,_001_0011,,"Rd  <= Rs1 | { {20{imm[11]}}, imm[11:0]}",,
,ANDI,imm[11:0],,,," rs1 ",,_111,,"rd ",,_001_0011,,"Rd  <= Rs1 & { {20{imm[11]}}, imm[11:0]}",,
,SLLI,_000_0000,,shamt[4:0],," rs1 ",,_001,,"rd ",,_001_0011,,"Rd <= Rs1 << shamt[4:0]",,
,SRLI,_000_0000,,shamt[4:0],," rs1 ",,_101,,"rd ",,_001_0011,,"Rd <= Rs1 >> shamt[4:0]",,
,SRAI,_010_0000,,shamt[4:0],," rs1 ",,_101,,"rd ",,_001_0011,,"Rd <= $signed(Rs1) >>> shamt[4:0]",,
U-type,AUIPC,U-immediate[31:12],,,,,,,,"rd ",,_001_0111,,"Rd <= PC + { U-imm[31:12], {12{1'b0}} }",,
U-type,LUI,U-immediate[31:12],,,,,,,,"rd ",,_011_0111,,"Rd <= { U-imm[31:12], {12{1'b0}} }",,
,NOP,_0000_0000_0000,,,,_0_0000,,_000,,_0_0000,,_001_0011,,,,
,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,
Bit,,31,25,24,20,19,15,14,12,11,7,6,0,,,
"R-type Instruction",,"funct7 ",,rs2,," rs1 ",,"funct3 ",,"rd ",,opcode,,,,
,ADD,_000_0000,,rs2,," rs1 ",,_000,,rd,,_011_0011,,"Rd  <= Rs1 + Rs2",,
,SUB,_010_0000,,rs2,," rs1 ",,_000,,rd,,_011_0011,,"Rd  <= Rs1 - Rs2",,
,SLL,_000_0000,,rs2,," rs1 ",,_001,,rd,,_011_0011,,"Rd <= Rs1 << Rs2[4:0]",,
,SLT,_000_0000,,rs2,," rs1 ",,_010,,rd,,_011_0011,,"Rd = ( $signed(Rs1) < $signed(Rs2) )",,
,SLTU,_000_0000,,rs2,," rs1 ",,_011,,rd,,_011_0011,,"Rd = ( Rs1 < Rs2 )",,
,XOR,_000_0000,,rs2,," rs1 ",,_100,,rd,,_011_0011,,"Rd <= Rs1 ^ Rs2",,
,SRL,_000_0000,,rs2,," rs1 ",,_101,,rd,,_011_0011,,"Rd <= Rs1 >> Rs2[4:0]",,
,SRA,_010_0000,,rs2,," rs1 ",,_101,,rd,,_011_0011,,"Rd <= $signed(Rs1) >>> Rs2[4:0]",,
,OR,_000_0000,,rs2,," rs1 ",,_110,,rd,,_011_0011,,"Rd <= Rs1 | Rs2",,
,AND,_000_0000,,rs2,," rs1 ",,_111,,rd,,_011_0011,,"Rd <= Rs1 & Rs2",,
,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,
Bit,,31,25,24,20,19,15,14,12,11,7,6,0,,,
"Multiply operation",,funct7,,"rs2 (multiplier)",,"rs1 (multiplicand)",,funct3,,rd,,opcode,,,,
,MUL,_000_0001,,rs2,,rs1,,_000,,rd,,_011_0011,,"Rd <= $signed(Rs1) * $signed(Rs2)",,
,MULH,_000_0001,,rs2,,rs1,,_001,,rd,,_011_0011,,"Rd <= Upper($signed(Rs1) * $signed(Rs2))",,
,MULHSU,_000_0001,,rs2,,rs1,,_010,,rd,,_011_0011,,"Rd <= Upper($signed(Rs1) * Rs2)",,
,MULHU,_000_0001,,rs2,,rs1,,_011,,rd,,_011_0011,,"Rd <= Upper(Rs1 * Rs2)",,
,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,
Bit,,31,25,24,20,19,15,14,12,11,7,6,0,,,
"Division operation",,funct7,,"rs2 (divisor)",,"rs1 (dividend)",,funct3,,rd,,opcode,,,,
,DIV,_000_0001,,rs2,,rs1,,_100,,rd,,_011_0011,,"Rd <= $signed(Rs1) / $signed(Rs2)",,
,DIVU,_000_0001,,rs2,,rs1,,_101,,rd,,_011_0011,,"Rd <= Rs1 / Rs2",,
,REM,_000_0001,,rs2,,rs1,,_110,,rd,,_011_0011,,"Rd <= $signed(Rs1) % $signed(Rs2)",,
,REMU,_000_0001,,rs2,,rs1,,_111,,rd,,_011_0011,,"Rd <= Rs1 % Rs2",,
,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,
"Load/Store Instruction",,,"Memory address can be misalligned to 4/2 byte address boundary",,,,,,,,,,,,,
Bit,,31,25,24,20,19,15,14,12,11,7,6,0,,,
"LOAD instruction",I-type,offset[11:0],,,,base,,width,,dest,,opcode,,,,
,LB,imm[11:0],offset[11:0],,," rs1 ",,_000,,"rd ",,_000_0011,,"tmp_adr=Rs1 + { {20{imm[11]}}, imm[11:0]} ;",,
,,,,,,,,,,,,,,"Rd  <= { {24{Mem(tmp_adr)[7]}}, Mem(tmp_adr)[7:0] }",,
,LH,imm[11:0],offset[11:0],,," rs1 ",,_001,,"rd ",,_000_0011,,"tmp_adr=Rs1 + { {20{imm[11]}}, imm[11:0]} ;",,
,,,,,,,,,,,,,,"Rd  <= { {16{Mem(tmp_adr)[15]}}, Mem(tmp_adr)[15:0] }",,
,LW,imm[11:0],offset[11:0],,," rs1 ",,_010,,"rd ",,_000_0011,,"tmp_adr=Rs1 + { {20{imm[11]}}, imm[11:0]} ;",,
,,,,,,,,,,,,,,"Rd  <=  Mem(tmp_adr)",,
,LBU,imm[11:0],offset[11:0],,," rs1 ",,_100,,"rd ",,_000_0011,,"tmp_adr=Rs1 + { {20{imm[11]}}, imm[11:0]} ;",,
,,,,,,,,,,,,,,"Rd  <= { {24{1'b0}}, Mem(tmp_adr)[7:0] }",,
,LHU,imm[11:0],offset[11:0],,," rs1 ",,_101,,"rd ",,_000_0011,,"tmp_adr=Rs1 + { {20{imm[11]}}, imm[11:0]} ;",,
,,,,,,,,,,,,,,"Rd  <= { {16{1'b0}}, Mem(tmp_adr)[15:0] }",,
,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,
Bit,,31,25,24,20,19,15,14,12,11,7,6,0,,,
"Store Instruction",S-type,Offset[11:5],,src,,base,,width,,Offset[4:0],,opcode,,,,
,SB,imm[11:5],,rs2,,rs1,,_000,,imm[4:0],,_010_0011,,"tmp_adr=Rs1 + { {20{imm[11]}}, imm[11:0]} ;",,
,,,,,,,,,,,,,,Mem(tmp_adr)[7:0]=Rs2[7:0],,
,SH,imm[11:5],,rs2,,rs1,,_001,,imm[4:0],,_010_0011,,"tmp_adr=Rs1 + { {20{imm[11]}}, imm[11:0]} ;",,
,,,,,,,,,,,,,,Mem(tmp_adr)[15:0]=Rs2[7:0],,
,SW,imm[11:5],,rs2,,rs1,,_010,,imm[4:0],,_010_0011,,"tmp_adr=Rs1 + { {20{imm[11]}}, imm[11:0]} ;",,
,,,,,,,,,,,,,,Mem(tmp_adr)=Rs2,,
,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,
"Control Transfer Instructions",,,,,,,,,,,,,,,,
Bit,,31,30,,21,20,19,,12,11,7,6,0,,,
"Unconditional Jumps",J-type,offset[20],offset[10:1],,,offset[11],offset[19:12],,,rd,,opcode,,,,
,JAL,imm[20],imm[10:1],,,imm[11],imm[19:12],,,rd,,_110_1111,,"PC = PC + 32'h4",,
,,,,,,,,,,,,,,"Rd <= PC",,
,,,,,,,,,,,,,,"PC  <= PC + { {11{imm[20]}}, imm[20:1], 1'b0}",,
,,,,,,,,,,,,,,,,
Bit,,31,25,24,20,19,15,14,12,11,7,6,0,,,
"Unconditional Jumps",I-type,offset[11:0],,,,base,,0,,dest,,opcode,,,,
,JALR,"imm[11:0] ",,,,rs1,,_000,,rd,,_110_0111,,"PC = PC + 32'h4",,
,,,,,,,,,,,,,,"Rd <= PC",,
,,,,,,,,,,,,,,"PC  <= '( Rs1 + { {20{imm[11]}}, imm[11:0]} ) [31:01]",,
,,,,,,,,,,,,,,,,
Bit,,31,30,25,24,20,19,15,14,12,11,8,7,6,0,
"Conditional Jumps",,offset[12],offset[10:5],,src2,,src1,,funct3,,offset[4:1],,offset[11],opcode,,
,BEQ,imm[12],imm[10:5],,rs2,,rs1,,_000,,imm[4:1],,imm[11],_110_0011,,"Rs1 == Rs2 ? PC <= PC + { {19{imm[12]}}, imm[12:1], 1'b0}"
,BNE,imm[12],imm[10:5],,rs2,,rs1,,_001,,imm[4:1],,imm[11],_110_0011,,"Rs1 != Rs2 ? PC <= PC + { {19{imm[12]}}, imm[12:1], 1'b0}"
,BLT,imm[12],imm[10:5],,rs2,,rs1,,_100,,imm[4:1],,imm[11],_110_0011,,"$signed(Rs1) < $signed(Rs2) ? PC <= PC + { {19{imm[12]}}, imm[12:1], 1'b0}"
,BGE,imm[12],imm[10:5],,rs2,,rs1,,_101,,imm[4:1],,imm[11],_110_0011,,"$signed(Rs1) >= $signed(Rs2) ? PC <= PC + { {19{imm[12]}}, imm[12:1], 1'b0}"
,BLTU,imm[12],imm[10:5],,rs2,,rs1,,_110,,imm[4:1],,imm[11],_110_0011,,"Rs1 < Rs2 ? PC <= PC + { {19{imm[12]}}, imm[12:1], 1'b0}"
,BGEU,imm[12],imm[10:5],,rs2,,rs1,,_111,,imm[4:1],,imm[11],_110_0011,,"Rs1 >= Rs2 ? PC <= PC + { {19{imm[12]}}, imm[12:1], 1'b0}"
,,,,,,,,,,,,,,,,
